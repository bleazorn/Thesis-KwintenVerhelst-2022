generate-cheri-risc-v

p	::=	(begin info s ...)

info	::=	info?
 	 	 	 	 
s	::=	(set! addr trg)			| Move in memory		
	|	(set! reg loc)			| get in register (geheugen, register, integer)
	|	(set! reg triv)
 	|	(set! reg (binop reg reg))	| add en mul
	|	(set! reg (+ reg int12))	| add 
	| 	(with-label label s)		| label 
	|	(jump label)			| unconditional jump
	| 	(compare reg (relop reg reg))	| compare
	|	(jump-if label (relop reg reg))	| conditional jump

trg	::=	reg
	|	label

triv	::= 	trg			!!!waarom is triv weg in vorige versies???
	| 	integer

opand	::= 	integer
	|	reg
	 	 	 	 
loc 	::=	reg
	|	addr

relop	::=	 <
 	 |	 <=
 	 |	 =
 	 |	 >=
 	 |	 >
 	 |	 !=
 	 		 	 
binop	::=	+
 	|	*
 	 	 	 	 
reg	::=	zero
 	|	ra
 	|	sp
 	|	gp
 	|	tp
 	|	fp
 	|	pc
 	|	a0
 	|	a1
 	|	a2
 	|	a3
 	|	a4
 	|	a5
 	|	a6
 	|	a7
 	|	s0
 	|	s1
 	|	s2
 	|	s3
 	|	s4
 	|	s5
 	|	s6
 	|	s7
 	|	s8
 	|	s9
 	|	s10
 	|	s11
 	|	t0
 	|	t1
 	|	t2
 	|	t3
 	|	t4
 	|	t5
 	|	t6

addr	::= 	(fbp - dispoff)

fbp	::=	frame-base-pointer-register?

dispoff	::=	dispoffset?

label	::= 	label?
 	 	 	 	 
integer	::=	int32
	|	int12

int32	::=	int32?
int12	::=	int12?

#|
label 						foo:
						    inst
unconditonal jump				jal zero, offset (20bit) rd = pc + 4
conditional jump
	=	BEQ rs1  = rs2			rs1, rs2, label
	!=	BNE rs1 != rs2
	<	BLT rs1  < rs2
	>	BGT rs1  > rs2
	<=	BLE rs1 <= rs2
	>=	BGE rs1 >= rs2
conditional
	< 	SLT rs1 < rs2 			rd, rs1, rs2   rd = 0 |1 (slti rs2 -> int12)
	> 	vorige maar reg omdraaien	
	=	SUB rd1, rs1, rs2  SLTIU rd, rd1, 1			0 false 1 true
	!= 	SUB rd1, rs1, rs2  SLTU rd, x0, rs
	<=	SUB rd1, rs1, rs2  SLTI  rd, rd1, 1
	=>	vorige maar reg omdraaien

Kan label in address gestoken worden? Neen
|#
