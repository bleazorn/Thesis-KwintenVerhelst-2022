p	::=	(begin s ...)
 	 	 	 	 
s	::=	(set! addr reg)			| Move in memory		
	|	(set! reg loc)			| get in register (geheugen, register, integer)
	|	(set! reg integer)
 	|	(set! reg (binop reg reg))	| add en mul
 	|	(set! reg (+ reg integer))
 	 	 	 	 
loc 	::=	reg
	|	addr
 	 		 	 
binop	::=	+
 	|	*
 	 	 	 	 
reg	::=	zero
 	|	ra
 	|	sp
 	|	gp
 	|	tp
 	|	fp
 	|	pc
 	|	a0
 	|	a1
 	|	a2
 	|	a3
 	|	a4
 	|	a5
 	|	a6
 	|	a7
 	|	s0
 	|	s1
 	|	s2
 	|	s3
 	|	s4
 	|	s5
 	|	s6
 	|	s7
 	|	s8
 	|	s9
 	|	s10
 	|	s11
 	|	t0
 	|	t1
 	|	t2
 	|	t3
 	|	t4
 	|	t5
 	|	t6

addr	::= 	(fbp - dispoff)

fbp	::=	frame-base-pointer-register?

dispoff	::=	dispoffset?
 	 	 	 	 
integer	::=	integer32?

#|
Verschil met versie 1
	Je kan nu in store en load 32 bits in geheugen
	Integer is 32 bits

|#
