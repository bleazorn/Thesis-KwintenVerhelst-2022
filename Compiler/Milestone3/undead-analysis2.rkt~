#lang racket

(require "common.rkt")
(require cpsc411/compiler-lib)
(provide undead-analysis)

(module+ test
  (require rackunit))

;
;(remove-undead u undead-out)->undead-set?
;u: aloc?
;undead-out: undead-set?
(define (undead-remove u undead-out)
  (if (aloc? u)
      (remove u undead-out)
      undead-out))

;
;(cons-undead u undead-out)->undead-set?
;u: aloc?
;undead-out: undead-set?
(define (undead-cons u undead-out)
  (if (and (aloc? u) (not (member u undead-out)))
      (cons u undead-out)
      undead-out))



;Performs undeadness analysis, decorating the program with undead-set tree. Only the info field of the program is modified.
;(undead-analysis p) â†’ Asm-lang-V2-undead?
;p:Asm-lang-V2-locals?
(define (undead-analysis p)
  (match p
    [`(module (,loc) ,t) `(module ,(cons loc #t) ,t)]
    [_ (println "failed analysis")]))


;(undead-analysis '(module ((locals (x.1))) (begin (set! x.1 42) (begin (set! y.2 x.1) (begin (set! z.3 (+ y.2 x.1)) (set! x.1 z.3))) (halt x.1))))
;(undead-analysis '(module ((locals (v.1 w.2 x.3 y.4 z.5 t.6 p.1))) (begin (set! v.1 1) (set! w.2 46) (set! x.3 v.1) (set! p.1 7) (halt z.5))))
(module+ test
  #|
;undead-effect
  ;succes
  (check-equal?  (undead-effect '(set! z.5 (+ z.5 t.6)) '(z.5)) '(t.6 z.5) "undead-effect: succes-1: binop operation")
  (check-equal?  (undead-effect '(set! p.1 -1) '(p.1 t.6 z.5)) '(t.6 z.5) "undead-effect: succes-2: assign integer")
  (check-equal?  (undead-effect '(set! t.6 y.4) '(t.6 z.5)) '(y.4 z.5) "undead-effect: succes-3: assign asoc")
  (check-equal?  (undead-effect '(set! y.4 x.3) '(y.4 x.3 w.2)) '(x.3 w.2) "undead-effect: succes-4: assign asoc and it is already an undead")
;undead-tail
  ;succes
  (check-equal?  (undead-tail '(halt z.5) '(())) '((z.5)()) "undead-tail: succes-1: halt instruction")
;undead-analysis
  ;succes
  (check-equal? (undead-analysis '(module ((locals (x.1)))
                                    (begin
                                      (set! x.1 42)
                                      (halt x.1))))
                '(module

                     ((locals (x.1)) (undead-out ((x.1) ())))
                   (begin (set! x.1 42) (halt x.1)))
                "undead-analysis: succes-1: one instruction")
  (check-equal? (undead-analysis '(module ((locals (v.1 w.2 x.3 y.4 z.5 t.6 p.1)))
                                    (begin
                                      (set! v.1 1)
                                      (set! w.2 46)
                                      (set! x.3 v.1)
                                      (set! p.1 7)
                                      (set! x.3 (+ x.3 p.1))
                                      (set! y.4 x.3)
                                      (set! p.1 4)
                                      (set! y.4 (+ y.4 p.1))
                                      (set! z.5 x.3)
                                      (set! z.5 (+ z.5 w.2))
                                      (set! t.6 y.4)
                                      (set! p.1 -1)
                                      (set! t.6 (* t.6 p.1))
                                      (set! z.5 (+ z.5 t.6))
                                      (halt z.5))))
                '(module
                     ((locals (v.1 w.2 x.3 y.4 z.5 t.6 p.1))
                      (undead-out
                       ((v.1)
                        (v.1 w.2)
                        (x.3 w.2)
                        (p.1 x.3 w.2)
                        (x.3 w.2)
                        (y.4 x.3 w.2)
                        (p.1 y.4 x.3 w.2)
                        (x.3 w.2 y.4)
                        (w.2 z.5 y.4)
                        (y.4 z.5)
                        (t.6 z.5)
                        (p.1 t.6 z.5)
                        (t.6 z.5)
                        (z.5)
                        ())))
                   (begin
                     (set! v.1 1)
                     (set! w.2 46)
                     (set! x.3 v.1)
                     (set! p.1 7)
                     (set! x.3 (+ x.3 p.1))
                     (set! y.4 x.3)
                     (set! p.1 4)
                     (set! y.4 (+ y.4 p.1))
                     (set! z.5 x.3)
                     (set! z.5 (+ z.5 w.2))
                     (set! t.6 y.4)
                     (set! p.1 -1)
                     (set! t.6 (* t.6 p.1))
                     (set! z.5 (+ z.5 t.6))
                     (halt z.5)))
                "undead-analysis: succes-2: multiple instructions")
  (check-equal? (undead-analysis '(module ((locals (x.1 y.1)))
                                    (begin
                                      (set! y.1 42)
                                      (set! x.1 5)
                                      (halt x.1))))
                '(module                     
                     ((locals (x.1 y.1)) (undead-out (() (x.1) ())))
                   (begin (set! y.1 42) (set! x.1 5) (halt x.1)))
                "undead-analysis: succes-3: unused variable")
  (check-equal? (undead-analysis '(module ((locals (x.1 y.1)))
                                    (begin
                                      (set! x.1 5)
                                      (set! y.1 42)
                                      (halt x.1))))
                '(module
                     ((locals (x.1 y.1)) (undead-out ((x.1) (x.1) ())))
                   (begin (set! x.1 5) (set! y.1 42) (halt x.1)))
                "undead-analysis: succes-4: unused variable")
    (check-equal? (undead-analysis '(module ((locals (x.1)))
                                      (begin
                                        (set! x.1 42)
                                        (begin
                                          (set! y.2 x.1)
                                          (begin
                                            (set! z.3 (+ y.2 x.1))
                                            (set! x.1 z.3)))
                                        (halt x.1))))
                '(module
                     ((locals (x.1)) (undead-out ((x.1) ((x.1 y.2) ((z.3) (x.1))) ())))
                   (begin
                     (set! x.1 42)
                     (begin
                       (set! y.2 x.1)
                       (begin
                         (set! z.3 (+ y.2 x.1))
                         (set! x.1 z.3)))
                     (halt x.1)))
                "undead-analysis: succes-5: begin effect instruction")
  ;|#
  )