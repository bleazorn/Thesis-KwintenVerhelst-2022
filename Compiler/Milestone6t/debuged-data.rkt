#lang racket

;normal
'(begin
   ()
   (with-label L.tmp.0 (set! cs10 (- cfp 16)))
   (set! (cs10 - 0) cra)
   (set! t0 1)
   (set! t1 2)
   (set! cfp (+ cfp -16))
   (set! a1 t0)
   (set! a2 t1)
   (set! cra L.rpLabel.10)
   (jump L.swap.1)
   (with-label L.rpLabel.10 (set! cfp (+ cfp 16)))
   (set! cs10 (- cfp 16))
   (set! cs11 (cs10 - 0))
   (jump cs11)
   (with-label L.swap.1 (set! cs10 (- cfp 16)))
   (set! (cs10 - 0) cra)
   (set! t2 a1)
   (set! t0 a2)
   (jump-if L.tmp.13 (< t0 t2))
   (jump L.tmp.14)
   (with-label L.tmp.13 (set! a0 t2))
   (set! cs10 (- cfp 16))
   (set! cs11 (cs10 - 0))
   (jump cs11)
   (with-label L.tmp.14 (set! t1 t0))
   (set! t0 t2)
   (set! cfp (+ cfp -16))
   (set! a1 t1)
   (set! a2 t0)
   (set! cra L.rpLabel.9)
   (jump L.swap.1)
   (with-label L.rpLabel.9 (set! cfp (+ cfp 16)))
   (set! t0 a0)
   (set! a0 t0)
   (set! cs10 (- cfp 16))
   (set! cs11 (cs10 - 0))
   (jump cs11))

;stktokens-seal
'(begin
   ((got-labels ((L.swap.1 0)))
    (actual-frame-size 16384)
    (frameSize 3)
    (assignment ((tmp.7 t0) (tmp.8 t1)))
    (conflicts
     ((a0 (cra))
      (a2 (cra cfp a1))
      (a1 (cra a2 tmp.8 cfp))
      (cs1 (cra tmp.8 tmp.7))
      (cfp (cra a2 tmp.8 a1 tmp.7))
      (cra (cfp a0 cs1 a1 a2 tmp.8 tmp.7))
      (tmp.8 (cfp a1 tmp.7 cra cs1))
      (tmp.7 (tmp.8 cfp cra cs1))))
    (undead-out
     ((cra cfp cs1 tmp.7) (cra cfp cs1 tmp.7 tmp.8) (((cra cfp a0 cs1) ((tmp.8 cfp a1) (cfp a1 a2) (cfp cra a1 a2) (cfp cra a1 a2))) (cfp a0 cs1))))
    (call-undead ())
    (locals (tmp.7 tmp.8))
    (allocatedFvars (fv0 fv1 fv2))
    (new-frames ())
    (paramSize 0))
   (with-label L.tmp.0 (set! cs1 ct6))
   (set! t0 1)
   (set! t1 2)
   (set! csp (+ csp 0))
   (set! (csp - 0) cra)
   (set! csp (- csp 0))
   (set! csp (+ csp 16))
   (setLinear! (csp - 0) cfp)
   (set! csp (- csp 16))
   (set! csp (+ csp 32))
   (set! (csp - 0) cs1)
   (set! csp (- csp 32))
   (set! a1 t0)
   (set! a2 t1)
   (set! cra L.rpLabel.10)
   (split csp csp cfp 16384)
   (set! cs1 (- cs1 0))
   (set! cs2 (cs1 - 0))
   (set! cs1 (+ cs1 0))
   (set! cs2 (+ cs2 76))
   (seal cra cra cs2 76)
   (set! cs2 (+ cs2 76))
   (seal cfp cfp cs2 76)
   (set! cgp (+ cgp 0))
   (set! ct0 (cgp - 0))
   (set! cgp (- cgp 0))
   (set! cgp (+ cgp 16))
   (set! ct6 (cgp - 0))
   (set! cgp (- cgp 16))
   (invoke ct0 ct6)
   (with-label L.rpLabel.10 (set! cfp ct6))
   (splice csp csp cfp 16384)
   (set! csp (+ csp 32))
   (set! cs1 (csp - 0))
   (set! csp (- csp 32))
   (set! csp (+ csp 16))
   (setLinear! cfp (csp - 0))
   (set! csp (- csp 16))
   (set! csp (+ csp 0))
   (set! cra (csp - 0))
   (set! csp (- csp 0))
   (set! ct6 cfp)
   (invoke cra ct6)
   (with-label L.swap.1 (set! cs1 ct6))
   (set! t2 a1)
   (set! t0 a2)
   (jump-if L.tmp.11 (< t0 t2))
   (jump L.tmp.12)
   (with-label L.tmp.11 (set! a0 t2))
   (set! ct6 cfp)
   (invoke cra ct6)
   (with-label L.tmp.12 (set! t1 t0))
   (set! t0 t2)
   (set! csp (+ csp 0))
   (set! (csp - 0) cra)
   (set! csp (- csp 0))
   (set! csp (+ csp 16))
   (setLinear! (csp - 0) cfp)
   (set! csp (- csp 16))
   (set! csp (+ csp 32))
   (set! (csp - 0) cs1)
   (set! csp (- csp 32))
   (set! a1 t1)
   (set! a2 t0)
   (set! cra L.rpLabel.9)
   (split csp csp cfp 16384)
   (set! cs1 (- cs1 0))
   (set! cs2 (cs1 - 0))
   (set! cs1 (+ cs1 0))
   (set! cs2 (+ cs2 29))
   (seal cra cra cs2 29)
   (set! cs2 (+ cs2 29))
   (seal cfp cfp cs2 29)
   (set! cgp (+ cgp 0))
   (set! ct0 (cgp - 0))
   (set! cgp (- cgp 0))
   (set! cgp (+ cgp 16))
   (set! ct6 (cgp - 0))
   (set! cgp (- cgp 16))
   (invoke ct0 ct6)
   (with-label L.rpLabel.9 (set! cfp ct6))
   (splice csp csp cfp 16384)
   (set! csp (+ csp 32))
   (set! cs1 (csp - 0))
   (set! csp (- csp 32))
   (set! csp (+ csp 16))
   (setLinear! cfp (csp - 0))
   (set! csp (- csp 16))
   (set! csp (+ csp 0))
   (set! cra (csp - 0))
   (set! csp (- csp 0))
   (set! t0 a0)
   (set! a0 t0)
   (set! ct6 cfp)
   (invoke cra ct6))
;stktokens-sentry
'(begin
   ((got-labels ((L.swap.1 0)))
    (actual-frame-size 16384)
    (frameSize 3)
    (assignment ((tmp.7 t0) (tmp.8 t1)))
    (conflicts
     ((a0 (cra))
      (a2 (cra cfp a1))
      (a1 (cra a2 tmp.8 cfp))
      (cs1 (cra tmp.8 tmp.7))
      (cfp (cra a2 tmp.8 a1 tmp.7))
      (cra (cfp a0 cs1 a1 a2 tmp.8 tmp.7))
      (tmp.8 (cfp a1 tmp.7 cra cs1))
      (tmp.7 (tmp.8 cfp cra cs1))))
    (undead-out
     ((cra cfp cs1 tmp.7) (cra cfp cs1 tmp.7 tmp.8) (((cra cfp a0 cs1) ((tmp.8 cfp a1) (cfp a1 a2) (cfp cra a1 a2) (cfp cra a1 a2))) (cfp a0 cs1))))
    (call-undead ())
    (locals (tmp.7 tmp.8))
    (allocatedFvars (fv0 fv1 fv2))
    (new-frames ())
    (paramSize 0))
   (with-label L.tmp.0 (set! cs1 pcc))
   (set! t5 2147491840)
   (set-addr! cs1 t5)
   (set! t0 1)
   (set! t1 2)
   (set! csp (+ csp 0))
   (set! (csp - 0) cra)
   (set! csp (- csp 0))
   (set! csp (+ csp 16))
   (setLinear! (csp - 0) cfp)
   (set! csp (- csp 16))
   (set! csp (+ csp 32))
   (set! (csp - 0) cs1)
   (set! csp (- csp 32))
   (set! a1 t0)
   (set! a2 t1)
   (set! cra L.rpLabel.10)
   (split csp csp cfp 16384)
   (set! cs1 (- cs1 0))
   (set! cs2 (cs1 - 0))
   (set! cs1 (+ cs1 0))
   (set! cs2 (+ cs2 15))
   (seal cra cra cs2 15)
   (set! cs2 (+ cs2 15))
   (seal cfp cfp cs2 15)
   (set! cgp (+ cgp 0))
   (set! ct0 (cgp - 0))
   (set! cgp (- cgp 0))
   (jump ct0)
   (with-label L.rpLabel.10 (splice csp csp cfp 16384))
   (set! csp (+ csp 32))
   (set! cs1 (csp - 0))
   (set! csp (- csp 32))
   (set! csp (+ csp 16))
   (setLinear! cfp (csp - 0))
   (set! csp (- csp 16))
   (set! csp (+ csp 0))
   (set! cra (csp - 0))
   (set! csp (- csp 0))
   (jump cra)
   (with-label L.swap.1 (set! cs1 pcc))
   (set! t5 2147491840)
   (set-addr! cs1 t5)
   (set! t2 a1)
   (set! t0 a2)
   (jump-if L.tmp.11 (< t0 t2))
   (jump L.tmp.12)
   (with-label L.tmp.11 (set! a0 t2))
   (jump cra)
   (with-label L.tmp.12 (set! t1 t0))
   (set! t0 t2)
   (set! csp (+ csp 0))
   (set! (csp - 0) cra)
   (set! csp (- csp 0))
   (set! csp (+ csp 16))
   (setLinear! (csp - 0) cfp)
   (set! csp (- csp 16))
   (set! csp (+ csp 32))
   (set! (csp - 0) cs1)
   (set! csp (- csp 32))
   (set! a1 t1)
   (set! a2 t0)
   (set! cra L.rpLabel.9)
   (split csp csp cfp 16384)
   (set! cs1 (- cs1 0))
   (set! cs2 (cs1 - 0))
   (set! cs1 (+ cs1 0))
   (set! cs2 (+ cs2 0))
   (seal cra cra cs2 0)
   (set! cs2 (+ cs2 0))
   (seal cfp cfp cs2 0)
   (set! cgp (+ cgp 0))
   (set! ct0 (cgp - 0))
   (set! cgp (- cgp 0))
   (jump ct0)
   (with-label L.rpLabel.9 (splice csp csp cfp 16384))
   (set! csp (+ csp 32))
   (set! cs1 (csp - 0))
   (set! csp (- csp 32))
   (set! csp (+ csp 16))
   (setLinear! cfp (csp - 0))
   (set! csp (- csp 16))
   (set! csp (+ csp 0))
   (set! cra (csp - 0))
   (set! csp (- csp 0))
   (set! t0 a0)
   (set! a0 t0)
   (jump cra))
;cheri-linkage-seal
'(begin
   ((got-labels ((L.swap.1 0))) (frameSize ((main 2) (L.swap.1 2))))
   (with-label L.tmp.0 (set! t0 1))
   (set! t1 2)
   (set! cs10 (- cfp 16))
   (set! (cs10 - 0) cra)
   (set! cs10 (- cfp 32))
   (set! (cs10 - 0) csp)
   (set! a1 t0)
   (set! a2 t1)
   (set! cra L.rpLabel.10)
   (set! cs10 (+ cgp 0))
   (set! ct0 (cs10 - 0))
   (jump ct0)
   (with-label L.rpLabel.10 (set! csp ct6))
   (set! cs10 (- cfp 32))
   (set! csp (cs10 - 0))
   (set! cs10 (- cfp 16))
   (set! cra (cs10 - 0))
   (set! ct6 csp)
   (invoke cra ct6)
   (with-label L.swap.1 (set! t2 a1))
   (set! t0 a2)
   (jump-if L.tmp.11 (< t0 t2))
   (jump L.tmp.12)
   (with-label L.tmp.11 (set! a0 t2))
   (set! ct6 csp)
   (invoke cra ct6)
   (with-label L.tmp.12 (set! t1 t0))
   (set! t0 t2)
   (set! cs10 (- cfp 16))
   (set! (cs10 - 0) cra)
   (set! cs10 (- cfp 32))
   (set! (cs10 - 0) csp)
   (set! a1 t1)
   (set! a2 t0)
   (set! cra L.rpLabel.9)
   (set! cs10 (+ cgp 0))
   (set! ct0 (cs10 - 0))
   (jump ct0)
   (with-label L.rpLabel.9 (set! csp ct6))
   (set! cs10 (- cfp 32))
   (set! csp (cs10 - 0))
   (set! cs10 (- cfp 16))
   (set! cra (cs10 - 0))
   (set! t0 a0)
   (set! a0 t0)
   (set! ct6 csp)
   (invoke cra ct6))