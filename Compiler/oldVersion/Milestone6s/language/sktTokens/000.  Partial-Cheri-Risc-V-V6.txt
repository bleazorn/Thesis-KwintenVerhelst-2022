p	::=	(s ...)
 	 	 	 	 
s	::=	sw.cap ireg, 0(creg)			store in memory on address symbol
	|	lw.cap ireg, 0(creg)			loads what is in memory on address symbol

	|	addi ireg, ireg, 0    			move register	
	|	li ireg int32				insert integer 32bits
	|	addi ireg, zero, int12			insert integer 12bits

	|	add ireg, ireg, ireg  			addition reg 
	|	addi ireg, ireg, int12 			addition int 12bits 
	|	sub ireg, ireg, ireg			substraction reg
 	|	mul  ireg, ireg, ireg			multiplication

	|	cmove creg, creg			move capability
	|	cincoffsetimm creg, cnull, int12	insert integer 12bits
	|	cllc creg, label			insert label
	|	cincoffset creg, creg, creg		addition capability
	|	cincoffsetimm creg, creg, int12		addition int 12 bits

	|	cjalr creg, creg			jump naar address in capability register
	|	beq ireg, ireg, label			jump =
	|	bne ireg, ireg, label			jump !=
	|	blt ireg, ireg, label			jump <
	|	bgt ireg, ireg, label			jump >
	|	ble ireg, ireg, label			jump <=
	|	bge ireg, ireg, label			jump >=

	|	slt ireg, ireg, ireg			compares < and result 0 false | 1 true
	|	slti ireg, ireg, int12			compares < with 12bit int
	|	sltu ireg, ireg, ireg			compares < unsigned
	| 	sltiu ireg, ireg, int12			compares < unsigned 12 bit integer
 	 	 	 	 
reg	::=	ireg
	|	creg
 	 	 	 	 
ireg	::=	zero
 	|	ra
 	|	sp
 	|	gp
 	|	tp
 	|	fp
 	|	pc
 	|	a0
 	|	a1
 	|	a2
 	|	a3
 	|	a4
 	|	a5
 	|	a6
 	|	a7
 	|	s0
 	|	s1
 	|	s2
 	|	s3
 	|	s4
 	|	s5
 	|	s6
 	|	s7
 	|	s8
 	|	s9
 	|	s10
 	|	s11
 	|	t0
 	|	t1
 	|	t2
 	|	t3
 	|	t4
 	|	t5
 	|	t6

creg	::=	cnull
 	|	cra
 	|	csp
 	|	cgp
 	|	ctp
 	|	cfp
 	|	cpc
 	|	ca0
 	|	ca1
 	|	ca2
 	|	ca3
 	|	ca4
 	|	ca5
 	|	ca6
 	|	ca7
 	|	cs0
 	|	cs1
 	|	cs2
 	|	cs3
 	|	cs4
 	|	cs5
 	|	cs6
 	|	cs7
 	|	cs8
 	|	cs9
 	|	cs10
 	|	cs11
 	|	ct0
 	|	ct1
 	|	ct2
 	|	ct3
 	|	ct4
 	|	ct5
 	|	ct6

addr	::= 	dispoff(fbp)			(32 bit)

fbp	::=	fp

dispoff	::=	dispoffset?

label	::= 	label?
 	 	 	 	 
int32	::=	integer32?
int12	::=	int12?
